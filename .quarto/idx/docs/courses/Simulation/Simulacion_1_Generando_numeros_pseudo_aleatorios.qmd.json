{"title":"Simulación Estadística","markdown":{"yaml":{"title":"Simulación Estadística","subtitle":"Unidad 1: Generando números pseudo aleatorios","author":[{"name":"Francisco Plaza Vega","email":"francisco.plaza.v@usach.cl","affiliation":"Ingeniería en Estadística"}],"format":{"revealjs":{"self-contained":false,"slide-number":"c/t","width":1600,"height":900,"center":false,"theme":["simple","styles.scss"],"echo":true,"multiplex":true,"code-link":true}},"fig-align":"center","logo":"images/Usach_P2.png","editor":"source","incremental":true,"center-title-slide":true,"slide-number":true,"lang":"es","highlight-style":"github","transition":"fade","toc":false,"toc-title":"Contenidos","toc-expand":false,"toc-depth":2,"number-sections":true,"number-depth":2,"bibliography":"refs.bib"},"headingText":"use_python('C:/ProgramData/Anaconda3/python.exe')","containsRefs":true,"markdown":"\n\n\n```{r}\n#| echo: false\nlibrary(reticulate)\n```\n\n# Simulación Estadística {background-color=\"#00A499\"}\n\n## ¿Qué es la simulación?\n\n::: {.definition}\nEl acto de [\"_simular_\"]{.green}:<br/>\n\n- Según el [Diccionario de la Lengua Española de la RAE](https://www.rae.es/drae2001/simular), [\"_simular_\"]{.green} significa representar algo, fingiendo o imitando lo que no es.\n\n- De acuerdo con [TheFreeDictionary](https://es.thefreedictionary.com/simular), [\"_simular_\"]{.green} es hacer creer una cosa que no es verdad con palabras, gestos o acciones, y también se refiere a representar algo fingiendo lo que no es.\n\n- [WordReference](https://www.wordreference.com/definicion/simular#:~:text=tr.,simul%C3%B3%20que%20no%20le%20importaba.) define [\"_simular_\"]{.green} como representar una cosa fingiendo o imitando lo que no es.\n:::\n\n---\n\n::: {.definition}\n[de  ChatGPT]{.green}<br/>\n_Estas definiciones resaltan la idea de crear una apariencia o representación de algo que no es real o verdadero, ya sea mediante acciones, palabras o gestos. En un contexto más amplio, la simulación puede usarse en diversos campos, como la ciencia, la tecnología y el arte, para representar o modelar situaciones, procesos o sistemas de manera virtual o teórica._ \n<br/>\n\n_El término \"simular\" proviene del latín \"_simulāre_\" y tiene varias definiciones que se centran en la idea de representación o imitación_\n:::\n\n---\n\nLa experimentación directa sobre la realidad puede tener muchos inconvenientes, entre otros:\n\n- [Coste elevado]{.green}: por ejemplo cuando las pruebas son destructivas o si es necesario esperar mucho tiempo para observar los resultados.\n\n- [Puede no ser ética]{.green}: por ejemplo la experimentación sobre seres humanos o la dispersión de un contaminante.\n\n- [Puede resultar imposible]{.green}: por ejemplo cuando se trata de un acontecimiento futuro o una alternativa en el pasado.\n\n## Simulación estadística \n\n::: {.small}\n\n- Para estadísticos e investigadores, el término ['simulación']{.green} describe una gran cantidad de técnicas variadas y útiles, todas relacionadas con la imitación de las reglas de un modelo de algún tipo. Estas técnicas permiten a los investigadores y analistas estudiar y predecir el comportamiento del sistema bajo diferentes condiciones y escenarios sin necesidad de experimentos físicos o reales.\n\n- En la simulación estadística, se emplean modelos probabilísticos para representar la incertidumbre y la variabilidad inherente a los fenómenos reales. Estos modelos pueden ser tan simples como distribuciones de probabilidad básicas o tan complejos como sistemas dinámicos y redes neuronales. Al ejecutar la simulación múltiples veces, se obtienen distribuciones de resultados que ayudan a comprender mejor el sistema y a evaluar riesgos, eficiencia, y otras métricas importantes.\n\n- El objetivo es a menudo explorar [\"qué pasaría si\"]{.green} en situaciones donde los experimentos reales son impracticables, costosos, peligrosos o éticamente inviables.\n\n:::\n\n---\n\n::: {.example}\n[Por ejemplo:]{.blue}<br/>\n\n- [En ingeniería]{.green}, los estudios de simulación pueden usarse para predecir cómo se comportará una estructura bajo ciertas cargas sin tener que construirla físicamente. \n\n- [En finanzas]{.green}, pueden ayudar a evaluar los riesgos de diferentes inversiones o estrategias de mercado. \n\n- [En medicina]{.green}, se pueden utilizar para prever la progresión de enfermedades o la respuesta a distintos tratamientos.\n:::\n<br/>\n\n. . .\n\nLos estudios de simulación [_dependen de la generación de datos y escenarios artificiales_]{.green}, pero [buscan producir resultados que sean lo suficientemente precisos]{.green} y realistas como para informar decisiones o entender mejor un sistema o fenómeno.\n\n---\n\n::: {.example}\n[Ejemplo práctico]{.blue}<br/>\nSupongamos que comenzamos a coleccionar láminas para un álbum con $n = 75$ láminas, que se venden sobres con $m = 6$ láminas y cada sobre tiene un costo de $\\$800$, y que estamos interesados en el número de sobres que hay que comprar para completar la colección, por ejemplo en su valor medio. \n:::\n<br/>\n\n. . .\n\nPodemos aproximar la distribución del número de sobres para completar la colección a partir de $nsim = 1000$ simulaciones de coleccionistas de láminas\n\n--- \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n### Código\n\n```{r}\n#| eval: false\n#| include: true\n# Parámetros\nn <- 75 # Número total de láminas del álbum\nm <- 6  # Número de láminas en cada sobre\nrepe <- TRUE # Láminas repetidas en cada sobre\n# Número de simulaciones\nnsim <- 1000\n# Resultados simulación\nnsobres <- numeric(nsim)\n# evol <- vector(\"list\", nsim)\n# Fijar semilla\nset.seed(1)\n# Bucle simulación\nfor (isim in 1:nsim) {\n  # seed <- .Random.seed    # .Random.seed <- seed\n  album <- logical(n)\n  i <- 0 # Número de sobres\n  while(sum(album) < n) {\n    i <- i + 1\n    album[sample(n,m, replace = repe)] <- TRUE\n  }\n  nsobres[isim] <- i\n}\n\nhist(nsobres, breaks = \"FD\", freq = FALSE,\n     main = \"\", xlab = \"Número de sobres\")\nlines(density(nsobres))\n```\n:::\n\n::: {.column width=\"50%\"}\n\n### Histograma\n```{r}\n#| eval: true\n#| echo: false\n# Parámetros\nn <- 75 # Número total de láminas del álbum\nm <- 6  # Número de láminas en cada sobre\nrepe <- TRUE # Láminas repetidas en cada sobre\n# Número de simulaciones\nnsim <- 1000\n# Resultados simulación\nnsobres <- numeric(nsim)\n# evol <- vector(\"list\", nsim)\n# Fijar semilla\nset.seed(1)\n# Bucle simulación\nfor (isim in 1:nsim) {\n  # seed <- .Random.seed    # .Random.seed <- seed\n  album <- logical(n)\n  i <- 0 # Número de sobres\n  while(sum(album) < n) {\n    i <- i + 1\n    album[sample(n,m, replace = repe)] <- TRUE\n  }\n  nsobres[isim] <- i\n}\n\nhist(nsobres, breaks = \"FD\", freq = FALSE,\n     main = \"\", xlab = \"Número de sobres\")\nlines(density(nsobres))\n```\n:::\n::::\n\n--- \n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n:::{.small}\nAproximación por simulación del número medio de sobres para completar la colección:\n:::\n\n```{r}\n#| eval: true\n#| echo: true\nmean(nsobres)\n```\n\n<br/>\n\n::: {.small}\nNúmero mínimo de sobres para asegurar de que se completa la colección con una probabilidad del 95%:\n:::\n\n```{r}\n#| eval: true\n#| echo: true\nquantile(nsobres, probs = 0.95)\n```\n\n<br/>\n\n::: {.small}\nReserva de dinero para poder completar la colección el 95% de las veces:\n:::\n\n```{r}\n#| eval: true\n#| echo: true\nquantile(nsobres, probs = 0.95)*800\n```\n:::\n\n::: {.column width=\"50%\"}\n\nAproximaciones por simulación de la distribución del número de sobres para completar la colección, de su valor esperado (línea vertical continua) y del cuantil 0.95 (línea vertical discontinua).\n\n```{r}\n#| eval: true\n#| echo: true\nsol = mean(nsobres)\nnmin = quantile(nsobres, probs = 0.95)\nhist(nsobres, breaks = \"FD\", freq = FALSE,\n     main = \"\", xlab = \"Número de sobres\")\nlines(density(nsobres))\nabline(v = sol)\nabline(v = nmin, lty = 2)\n\n```\n\n:::\n\n::::\n\n## Aplicaciones de simulación\n\nLa simulación resulta de utilidad en multitud de contextos diferentes. Los principales campos de aplicación en estadística pueden ser:\n\n- Muestreo, remuestreo…\n\n- Aproximación de distribuciones (de estadísticos, estimadores…)\n\n- Realización de contrastes, intervalos de confianza…\n\n- Comparación de estimadores, contrastes…\n\n- Validación teoría (distribución asintótica…)\n\n- Inferencia Bayesiana\n\n\n## Tipos de números aleatorios\n\nEl primer requisito para poder realizar simulación estocástica sería disponer de números aleatorios. Se distingue entre tres tipos de secuencias:\n\n- [números aleatorios puros (true random):]{.orange} se caracteriza porque no existe ninguna regla o plan que nos permita conocer sus valores.\n\n- [números pseudo-aleatorios:]{.orange} simulan realizaciones de una variable aleatoria (uniforme),\n\n- [números cuasi-aleatorios:]{.orange} secuencias deterministas con una distribución más regular en el rango considerado.\n\n---\n\n### Números aleatorios puros\n\nNormalmente son obtenidos por procesos físicos (loterías, ruletas, ruidos…) y, hasta hace una décadas, se almacenaban en tablas de dígitos aleatorios. Por ejemplo, en 1955 la Corporación RAND publicó el libro [*A Million Random Digits with 100,000 Normal Deviates*]{.orange} que contenía números aleatorios generados mediante una ruleta electrónica conectada a una computadora\n\n![Portada del libro *A Million Random Digits with 100,000 Normal Deviates* [@hammersley1955million]. ](images/rand_book.jpg){width=\"20%\" fig-align=\"center\"}\n\n---\n\nEl procedimiento que se utilizaba para seleccionar de una tabla, de forma manual, números aleatorios en un rango de 1 a $m$ era el siguiente:\n\n- Se selecciona al azar un punto de inicio en la tabla y la dirección que se seguirá.\n\n- Se agrupan los dígitos de forma que “cubran” el valor de $m$.\n\n- Se va avanzado en la dirección elegida, seleccionando los valores menores o iguales que $m$ y descartando el resto.\n\n---\n\n### Números cuasi-aleatorios\n\nAlgunos problemas, como la integración numérica (que veremos más adelante en este curso), no dependen realmente de la aleatoriedad de la secuencia. Para evitar generaciones poco probables, se puede recurrir a secuencias [*cuasi-aleatorias*]{.orange}, también denominadas sucesiones de baja discrepancia (hablaríamos entonces de métodos cuasi-Monte Carlo, por ejemplo). La idea sería que la proporción de valores en una región cualquiera sea siempre aproximadamente proporcional a la medida de la región (como sucedería en media con la distribución uniforme, aunque no necesariamente para una realización concreta).\n\n\n----\n\nPor ejemplo, el paquete randtoolbox de R implementa métodos para la generación de secuencias cuasi-aleatorias \n\n```{r}\n#| eval: true\n#| echo: true\n#| fig-cap: \"Secuencias cuasi-aleatorias bidimensionales obtenidas con los métodos de Halton (izquierda), Sobol (centro) y Torus (derecha).\"\nlibrary(randtoolbox)\nn <- 2000\npar.old <- par(mfrow = c(1, 3))\nplot(halton(n, dim = 2), xlab = 'x1', ylab = 'x2')\nplot(sobol(n, dim = 2), xlab = 'x1', ylab = 'x2')\nplot(torus(n, dim = 2), xlab = 'x1', ylab = 'x2')\n```\n\n---\n\n### Números pseudo-aleatorios\n\nLa mayoría de los métodos de simulación se basan en la posibilidad de [generar números pseudo-aleatorios]{.orange} que imiten las propiedades de valores independientes de la distribución $U \\sim (0,1)$, es decir, que imiten las propiedades de una muestra aleatoria simple^[Se debe distinguir entre secuencia y muestra. En un problema de [inferencia]{.green}, en principio estamos interesados en una característica desconocida de la población. En cambio, en un problema de [simulación]{.green}, [la población]{.orange} es el modelo y lo conocemos por completo (no obstante el problema de simulación puede surgir como solución de un problema de inferencia)] de esta distribución.\n\nEl procedimiento habitual para obtener estas secuencias es emplear un algoritmo recursivo denominado generador:\n\n$$x_i = f(x_{i-1}, x_{i-2}, \\ldots, x_{i-k})$$\n\ndonde: $k$ es el orden del generador  y $(x_{0}, x_{1}, \\ldots, x_{k-1})$ es la semilla (estado inicial).\n\nEl periodo o longitud del ciclo es la longitud de la secuencia antes de que vuelva a repetirse. Lo denotaremos por $p$.\n\n---\n\n::: {.definition}\nLos números de la sucesión son predecibles, conociendo el [algoritmo]{.green} y la [semilla]{.green}. Sin embargo, si no se conociesen, no se debería poder distinguir una serie de números pseudoaleatorios de una sucesión de números verdaderamente aleatoria (utilizando recursos computacionales razonables). \n:::\n\n<br/>\nEn caso contrario esta predecibilidad puede dar lugar a algunos problemas. Acá se muestran algunos artículos que ejemplifican esta situación:\n\n  - [Cryptanalysis of the Random Number Generator of the Windows Operating System](http://eprint.iacr.org/2007/419).\n  \n  - [Attacks on Pseudo Random Number Generators Hiding a Linear Structure](https://eprint.iacr.org/2021/1204).\n  \n  - [Potential Weaknesses In Pseudorandom Number Generators](https://www.cs.tufts.edu/comp/116/archive/fall2013/ali.pdf).\n  \n  - [Security problems for a pseudorandom sequence generator based on the Chen chaotic system](https://www.sciencedirect.com/science/article/abs/pii/S0010465513001604).\n\n---\n\n- Como regla general, por lo menos mientras se está desarrollando un código o análisis particular, interesa fijar la semilla de aleatorización.\n\n- Permite la reproducibilidad de los resultados.\n\n- Facilita la depuración del código.\n\n---\n\n:::{.alert}\n[Tarea:]{.orange}</br>\nRevisar artículo *[A search for good pseudo-random number generators: Survey and empirical studies](https://www.sciencedirect.com/science/article/pii/S1574013722000144?casa_token=qAGiENpFHZwAAAAA:_BzpZp7UVbTaP517SK9ObEBs45Yg1niOBJlPg6EjIWkTU9nyZ0CuFf8qUp6_R0vZxJ6AQP4jFg)* [@bhattacharjee2022search].\n:::\n\n---\n\n### La Semilla\n\nLos computadores son máquinas determinísticas, capaces de seguir solamente reglas predeterminadas. La solución es emplear [números pseudo aleatorios]{.green}, que como esquema general, funcionan de la siguiente manera:\n\n- Se inicia una secuencia arbitraria de [bytes]{.orange}. Los [bits]{.orange} de esa secuencia son interpretados como los digitos de un número aleatorio $Uniforme(0,1)$, expresado de forma binaria hasta una cantidad fija de lugares decimales.\n\n- Luego se aplica una compleja función matemática (de forma determinística) que transforma el arreglo (o matriz) de bytes en un nuevo arreglo de bytes. El nuevo arreglo de bytes es técnicamente una función determinista del anterior, pero en la práctica no se parece mucho al arreglo original.\n\n- Voltear un solo bit en la matriz de bytes original podría cambiar los bits en cualquier parte de la salida. La nueva matriz se trata como una nueva variable $Uniforme(0,1)$, y así sucesivamente.\n\n\n--- \n\nUna [ventaja del uso de números pseudo aleatorios]{.orange} es que puede configurar manualmente la matriz de bytes inicial al comienzo de un programa. Esto se denomina la [semilla]{.green}. Lo anterior tiene algunos usos:\n\n- Si hay un error en algún programa aleatorio que sólo ocurre algunas veces, puede hacerse perfectamente reproducible y averiguar qué está pasando.\n\n- Si se necesita que los resultados de los análisis sean exactamente reproducibles, se puede establecer la semilla en la secuencia de comandos.\n\n- Cuando escribe pruebas, puede establecer la semilla y asegurarse de que el resultado sea exactamente el esperado.\n\n---\n\nEn Python\n```{python}\n#| echo: true\nimport random\nrandom.seed(10)\nprint(random.random())\n```\n\n\nEn R\n```{r}\n#| echo: true\nset.seed(10)\nprint(runif(1))\n```\n\n\n---\n\n### Generando números aleatorios en *R*\n\nLa generación de números pseudo-aleatorios en R es una de las mejores disponibles en paquetes estadísticos. Entre las herramientas implementadas en el paquete base de R podemos destacar:\n\n- ```set.seed(entero)```: permite establecer la semilla (y el generador).\n\n- ```RNGkind()```: selecciona el generador.\n\n- ```r_distribución(n,...)```: genera valores aleatorios de la correspondiente distribución. Por ejemplo, ```runif(n, min = 0, max = 1)```, generaría $n$ valores de una uniforme. Se puede acceder al listado completo de las funciones disponibles en el paquete ```stats``` mediante el comando ```?distributions```.\n\n- ```sample()```: genera muestras aleatorias de variables discretas y permutaciones.\n\n- ```simulate()```: genera realizaciones de la respuesta de un modelo ajustado.\n\n---\n\n::: {.definition}\n[La Semilla]{.green} </br>\n\n- La semilla se almacena en ```.Random.seed```:\n\n- Inicialmente no existe. La recomendación es establecerla con ```set.seed()```, en caso contrario se generará a partir del reloj del sistema cuando se necesite.\n\n- Se almacena como un objeto oculto en el entorno de trabajo (o entorno global ```.GlobalEnv```). Con las opciones por defecto de R, si al terminar una sesión almacenamos el entorno (en un fichero ```.RData```), al iniciar una nueva sesión se restaurará también la semilla (y se podría continuar con las simulaciones).\n\n- Es un vector de enteros cuya estructura depende del tipo de generador, por lo que no debería ser modificado manualmente.\n\n- Puede ser recomendable almacenar (el objeto completo) antes de generar simulaciones, e.g. ```seed <- .Random.seed```. Esto permite reproducir los resultados y facilita la depuración de posibles errores.\n\n:::\n\n## Práctica: Variables aleatorias Bernoulli\n\n::: {.example}\n[Monedas al aire: Variables aleatorias Bernoulli]{.green}</br>\n\nUno de los [modelos probabilísticos más intuitivos]{.orange} es simplemente lanzar una moneda (equilibrada o no).\n\n- Digamos que la probabilidad de obtener [cara]{.green} es $p$, por lo tanto, la probabilidad de obtener [sello]{.green} es $1-p$.\n\n- En términos probabilisticos podríamos decir que el lanzamiento de esta moneda corresponde a una [Variable aleatoria Bernoulli]{.orange}. También denotado por $Bernoulli(p)$.\n\n:::\n\n---\n\n<!-- https://livebook.manning.com/book/data-science-bookcamp/chapter-3/21 -->\nProbemos generando el experimento de manera computacional:\n\n::: {.panel-tabset} \n\n## Python\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{python}\n#| eval: false\n#| echo: true\n\n# importando librerías\nimport matplotlib.pyplot as plt\nfrom scipy.stats import bernoulli\n\n#Datos\np= 0.7 #Probabilidad de ocurrencia \nn = 1000 #Tamaño de la muestra\nmuestras = bernoulli.rvs(p,size=n) \nplt.figure(figsize=(5,4))\nplt.hist(muestras);\nplt.xlabel('Lanzamiento de la moneda')\nplt.ylabel('Conteo');\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{python} \n#| echo: false\n#| fig-align: center\n\n# importando librerías\nimport matplotlib.pyplot as plt\nfrom scipy.stats import bernoulli\n\n#Datos\np= 0.7 #Probabilidad de ocurrencia \nn = 1000 #Tamaño de la muestra\nmuestras = bernoulli.rvs(p,size=n)\nplt.figure(figsize=(5,4))\nplt.hist(muestras);\nplt.xlabel('Lanzamiento de la moneda')\nplt.ylabel('Conteo');\nplt.show()\n```\n\n:::\n\n:::\n\n## R\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{r}\n#| eval: false\n#| echo: true\n\nn = 1000\np = 0.7\nmoneda = rbinom(n, size = 1, prob = p)\nmoneda = ifelse(moneda == 0, \"Cara\", \"Sello\")\nbarplot(table(moneda)/n, \n        col = \"lightblue\", ylim = c(0,1), \n        ylab = \"Probabilidad\")\nabline(h=0.7, col= \"green\", lwd = 4)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r} \n#| echo: false\n#| fig-align: center\n\nn = 1000\np = 0.7\nmoneda = rbinom(n, size = 1, prob = p)\nmoneda = ifelse(moneda == 0, \"Cara\", \"Sello\")\nbarplot(table(moneda)/n, \n        col = \"lightblue\", ylim = c(0,1), \n        ylab = \"Probabilidad\")\nabline(h=0.7, col= \"green\", lwd = 4)\n```\n\n:::\n\n:::\n\n:::\n\n- La asignación de $p=0.7$ a la probabilidad de obtener *'cara'* y a $1-p=0.3$ la probabilidad de obtener *'sello'*, es denominado la función de masa de probabilidad, para esta variable aleatoria en particular.\n\n- Es conveniente describir la variable aleatoria en términos de números en vez de lados de una moneda. Por convención denominamos $cara=1$ y $sello=0$. \n\n---\n\n::: {.example}\n[Ejemplo]{.blue}</br>\n\nDos amigos efectúan una apuesta a partir de lanzamiento de una moneda. Un amigo le dice al otro:\n\n  > Te daré 5 por cada cara que salga y tu me pagarás 2 por cada sello que aparezca.\n\n:::\n\n- El pago promedio entonces será:\n  $$ \\mathbb{E}(pago) = 0.7 \\times 5 + 0.3 \\times (-2) = 2.9 $$\n  \n- Entonces, si lanzamos la moneda $N$ veces, donde $N$ es un número muy grande, el pago final será de aproximadamente $(2.9 \\times N)$.\n\n---\n\nPodemos observar cómo una variable aleatoria [Bernoulli]{.green}, podría generalizarse a algo como el lanzamiento de un dado, donde la función de masa de probabilidad asignaría una probabilidad a los números $0-5$. En este caso, denotamos como $p_i$ la probabilidad del $i$-ésimo resultado. Además:\n\n  - Todos los $p_i$ son no negativos, y\n  \n  - $\\sum_{i=0}^n p_i = 1$, con $n=5$. \n\nUna variable de tipo [Bernoulli]{.green} es denominada una [variable aleatoria discreta]{.green}. Esto significa que:\n\n  - Tiene un número finito de resultados posibles o\n  \n  - Todos sus posibles resultados pueden ser listados.\n  \n## Variables aleatorias Uniformes\n\n::: {.alert}\n[Lanzando dardos: Variables aleatorias Uniformes]{.green}</br>\n\nLo opuesto a las variables aleatorias discretas, son las [variables aleatorias contínuas]{.green}, que pueden tomar cualquier valor entre un rango de números.\n\n- La variable aleatoria contínua más simple para simular es la denominada [Uniforme]{.green}, denotada por $Uniforme(a,b)$.\n\n- Una v.a. $Uniforme(a,b)$, siempre se encontrará entre los números $a$ y $b$ con una probabilidad igual de estar en cualquier lugar dentro de ese rango.\n\n:::\n\n---\n\nProbemos generando una v.a. $Uniforme(1,5)$, de manera computacional:\n\n::: {.panel-tabset}\n\n## Python\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{python} \n#| eval: false\n#| include: true\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na, b = 1,5 #Rango \nn = 1000 #Tamaño de la muestra\nmuestras = np.random.uniform(low = a, high = b, size=n) \nplt.figure(figsize=(5,4))\ncount, bins, ignored = plt.hist(muestras, bins = 15, density=True)\nplt.plot(bins, np.ones_like(bins)/(b-a), linewidth=2, color='r')\nplt.xlim([0, 6]); plt.ylim([0, 1])\nplt.xlabel('x')\nplt.ylabel('Probabilidad');\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{python}\n#| echo: false\n#| fig-align: center\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na, b = 1,5 #Rango \nn = 1000 #Tamaño de la muestra\nmuestras = np.random.uniform(low = a, high = b, size=n) \nplt.figure(figsize=(5,4))\ncount, bins, ignored = plt.hist(muestras, bins = 15, density=True)\nplt.plot(bins, np.ones_like(bins)/(b-a), linewidth=2, color='r')\nplt.xlim([0, 6]); plt.ylim([0, 1]);\nplt.xlabel('$x$')\nplt.ylabel('Probabilidad');\nplt.show()\n```\n\n:::\n\n:::\n\n## R\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r} \n#| eval: false\n#| include: true\nn = 1000\na = 1\nb = 5\nmuestras = runif(n, a, b)\nhist(muestras, freq = FALSE,\n     col = \"lightblue\", \n     ylim = c(0,1), xlim = c((a-1),(b+1)),\n     ylab = \"Probabilidad\", main=NULL)\nabline(h=(1/(b-a)), col= \"green\", lwd = 4)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r}\n#| echo: false\n#| fig-align: center\n\nn = 1000\na = 1\nb = 5\nmuestras = runif(n, a, b)\nhist(muestras, freq = FALSE,\n     col = \"lightblue\", \n     ylim = c(0,1), xlim = c((a-1),(b+1)),\n     ylab = \"Probabilidad\", main=NULL)\nabline(h=(1/(b-a)), col= \"green\", lwd = 4)\n```\n\n:::\n\n:::\n\n:::\n\nPara v.a. discretas, la función de masa de probabilidad asigna una probabilidad finita a cada resultado posible. Para v.a. continuas, cada resultado exacto, tiene probabilidad 0, pero ciertos rangos tienen mayor probabilidad que otros. Denominamos a esta función la [función de densidad de probabilidad]{.orange} (pdf, por su sigla en inglés: *probability density function*). En el caso de la v.a. Uniforme, su pdf es:\n\n  $$p(x) = \\frac{1}{(b-a)}$$\n\n\n\n---\n\n::: {.alert}\n[Un recordatorio...]{.green}</br>\n\n- Similar a las funciones de masa de probabilidad, las restricciones de la pdf $f$ son:\n\n  - $f(x)$ no es nunca negativa, y\n  \n  - El área total bajo la curva de $f(x)$ es igual a 1. \n  \n- Cualquier $f$ que cumple estos requisitos, es una pdf válida. \n\n- Relacionado con la pdf, está la [Función de distribución acumulada]{.orange} (cdf, por su sigla en inglés: *cummulative distribution function*). Por convención, se utiliza la munúscula $f()$ para denotar a la pdf, y la mayúscula $F()$ para denotar a la cdf.\n\n- $F(x)$ es la probabilidad de que el valor de una variable aleatoria sea $\\leq x$. Así, $F(x)$ es una función no decreciente que se aproxima a cero cuando $x \\to -\\infty$ y se aproxima a uno cuando $x \\to \\infty$. \n\n:::\n\n---\n\n### Distribución [Uniforme]{.green} y los números pseudo-aleatorios\n\nLa distribución [Uniforme]{.green} es una de las más sencillas de entender y constituye la base para construir distribuciones más complejas, en términos teóricos y matemáticos. \n\n::: {.example}\n[Por ejemplo:]{.orange}\n\n- Si se quiere simular una v.a. $Bernoulli(p)$, se puede simular una variable aleatoria $u$ desde una distribución $Uniforme(0,1)$. Si $u<p$, se establece $B=cara$. Si no, $B=sello$. \n\n- Si se quiere simular el lanzamiento de un dado, se puede dividir el rango $[0.0, 1.0]$ en seis regiones, donde la $i$-ésima región corresponde a la $i$-ésima cara del dado. Luego, se extrae un valor $u$ desde la distribución $Uniforme(0,1)$. La cara del dado corresponderá a la región $[0.0, 1.0]$ en que $u$ caiga.\n\n- Si queremos simular una v.a. $Exponencial$ (que veremos más adelante), se extrae $u$ desde una distribución $Uniforme(0,1)$, Luego se calcula $-Log(u)$.\n\n:::\n\n---\n\nDigamos que conocemos la cdf $F_X()$ de una v.a., y que además, podemos computar la inversa de la cdf $F_X^{-1}(u)$, entonces:\n\n- Entonces $F_X^{-1}(u)$ será una muestra de $X$ si $u$ es extraída desde una distribución $Uniforme$. \n\n- Las librerías computacionales que simulan v.a. usualmente muestrean desde la distribución $Uniforme$ como su operación fundamental.\n\n---\n\n### Ejercicios\n\nProbar simulando distribuciones a partir de números pseudo-aleatorios, graficar los resultados y comprobar con el generador de distribuciones:\n\n- Simular 1000 números aleatorios a partir de una distribución exponencial, con $\\lambda = 0.5$ (fijarse en la parametrización del código).\n\n- Simular 1000 números aleatorios a partir de una distribución normal, con $\\mu = 10$, y $\\sigma^2 = 3$.\n\n- Simular 1000 números aleatorios a partir de una distribución chi-cuadrado, considere que el cuadrado de una distribución normal estándar se distribuye chi cuadrado con 1 grado de libertad.\n\n---\n\n### Transformación de variables y relación entre distribuciones\n\n![Ejemplo de algunas relaciones entre distribuciones univariadas](images/distribution_relationship_map.png)\n\n---\n\n**Enlaces con información más detallada:**\n\n- [Diagrama de relaciones entre distribuciones](https://www.johndcook.com/blog/distribution_chart/)\n\n- [Un diagrama un poco más detallado](http://www.math.wm.edu/~leemis/chart/UDR/UDR.html)\n\n\n# Generación de números pseudo-aleatorios {background-color=\"#00A499\"}\n\n## Contexto\n\n- En los [primeros días]{.green} de la simulación, la aleatoriedad se generaba mediante [técnicas manuales]{.orange}: \n\n  - lanzamiento de monedas\n  \n  - lanzamiento de dados\n  \n  - barajada de cartas\n  \n  - giro de la ruleta\n\n- Más tarde, se conectaron dispositivos físicos, como diodos de ruido y contadores Geiger, a las computadoras con el mismo propósito. \n\n- La creencia predominante sostenía que solo los dispositivos mecánicos o electrónicos podían producir secuencias verdaderamente aleatorias. \n\n---\n\n- Aunque los dispositivos mecánicos todavía son de utilidad en el juego y las loterías, estos métodos ya no son empleados en aplicaciones computacionales y de análisis por varios motivos: \n\n  - Los métodos mecánicos eran demasiado lentos para uso general, \n  \n  - las secuencias generadas no pueden ser reproducidas y, \n  \n  - se ha encontrado que los números generados exhiben tanto sesgo como dependencia. \n\n. . . \n\n::: {.alert}\nAunque ciertos métodos físicos de generación modernos son rápidos y pasarían la mayoría de las pruebas estadísticas de aleatoriedad (por ejemplo, aquellos basados en la radiación de fondo universal o en el ruido de un chip de PC), su principal desventaja sigue siendo su falta de reproducibilidad \n:::\n\n---\n\n- La mayoría de los generadores de números aleatorios de hoy en día no se basan en dispositivos físicos, sino en algoritmos simples que se pueden implementar fácilmente en una computadora. \n\n- Son métodos rápidos, requieren poco espacio de almacenamiento y pueden reproducir fácilmente una secuencia dada de números aleatorios. \n  \n\n::: {.alert}\n  Es importante destacar que un buen generador de números aleatorios captura todas las propiedades estadísticas importantes de las secuencias aleatorias verdaderas, aunque la secuencia se genere mediante un algoritmo determinista. Por esta razón, a estos generadores a veces se les llama pseudorandom.\n:::\n\n---\n\nEl componente fundamental de un estudio de simulación es la capacidad de [generar números aleatorios]{.green}, donde un número aleatorio representa el [valor de una variable aleatoria distribuida uniformemente en (0,1)]{.green}.\n\nMientras que originalmente los números aleatorios se generaban manual o mecánicamente, utilizando técnicas como girar ruedas, lanzar dados o barajar cartas, el enfoque moderno es utilizar computación para generar sucesivamente números pseudo aleatorios Estos números pseudo aleatorios constituyen una secuencia de valores que, aunque se generan de manera determinista, tienen todas las apariencias de ser variables aleatorias uniformes independientes (0,1).\n\n---\n\n## Métodos Congruenciales\n\nConsideremos la siguiente [secuencia de 100 números]{.green}, generada en R, parecen ser aleatorios, ¿cierto?:\n\n::: {.alert}\n\n```{r}\n#| echo: false\n\nx0 = 0\nsecuencia = c(x0)\nn = 100\nfor (i in 1:n){\n  aux = ((pi + secuencia[i])^5)%%1\n  secuencia = c(secuencia, aux)\n}\nsecuencia\n```\n\n:::\n\n---\n\nLos números pseudo aleatorios tienen la [*apariencia*]{.green} de ser aleatorios. Sin embargo son generados de una manera muy poco aleatoria. Tomemos por ejemplo la siguiente fórmula recursiva\n\n$$ x_{i+1} = \\mbox{parte fraccional de }(\\pi + x_i )^5 \\qquad \\mbox{para } i\\geq 0 $$\n\ndonde $x_0$ es un número dado que se encuentra en el rango $0 < x_0 < 1$\n\n---\n\n::: {.definition}\n[Tarea: ]{.blue}</br>\nReplicar la secuencia de números presentada anteriormente (en *R* y/o *Python*).\n:::\n\n---\n\nUno de los enfoques más comunes para generar números pseudo aleatorios comienza con un valor inicial $x_0$, llamado la [semilla]{.orange}, y luego calcula recursivamente los valores sucesivos $x_i$, para $i \\geq 1$, dejando que\n\n$$\nx_{i+1} = a x_{i} + b \\mod m\n$$ {#eq-congruencial}\n\ndonde $a$ (multiplicador), $b$ (incremento) y $m$ (módulo) son constantes enteras positivas dadas, y donde lo anterior significa que $ax_{i}+b$ se divide por $m$ y el resto se toma como el valor de $x_{i+1}$. Así, cada $x_i$ es $0, 1, \\ldots, m - 1$ y la cantidad $\\frac{x_i}{m}$, llamada [número pseudo aleatorio]{.orange}, se toma como una aproximación al valor de la variable aleatoria uniforme (0,1) $\\sim U(0,1)$.\n\n---\n\nMétodo Congruencial Aditivo\n$$ x_i = (x_{i-1} + b) \\mod m$$\n\nMétodo Congruencial Multiplicativo\n$$ x_i = a x_{i-1} \\pmod m$$\n\nMétodo Congruencial Mixto\n$$ x_i = (a x_{i-1} + b) \\pmod m$$\n\n---\n\n::: {.example}\n[Ejemplos:]{.green}</br>\n\nProbemos algunas combinaciones de parámetros y sus resultados:\n\n- $x_0 = 89, a=1573, b=19, m=10^3$.\n\n- $b=0, a=2^{16} + 3$ y $m=2^{31}$, generador *RANDU* de IBM. Este generador tiene varios problemas, que pueden ser descritos [acá](https://young.physics.ucsc.edu/115/randu.pdf). [Wolfram.com](https://demonstrations.wolfram.com/PoorStatisticalQualitiesForTheRANDURandomNumberGenerator/) entrega una visualización referente a este mismo problema.\n\n- $b=0, a=7^5$ y $m=2^{31}-1$, el primo de Mersenne, empleado por librerías IMSL (*International Mathematics and Statistics Library*) y NAG *(Numerical Algorithms Group Ltd.*), propuesto por @Park1988.\n\n- $b=0, a=48271$ y $m=2^31 -1$, actualización del anterior, propuesta por @Marsaglia1993.\n\n:::\n\n---\n\n::: {.alert}\n[Algunas consideraciones]{.blue}</br>\n\n::: {.small}\n- La [elección de las constantes $a, b$ y $m$]{.green} tiene un razonamiento que considera varios objetivos. Para empezar, se quiere que la [aritmética sea eficiente]{.orange}. Los seres humanos hacen aritmética en base 10, así que si la @eq-congruencial se operara manualmente, usando lápiz y papel, sería sensato que [$m$ fuera alguna potencia entera positiva de 10]{.orange}.\n\n- Si uno calcula naturalmente en [base numérica $r$]{.green}, entonces la operación de división por $m$ es [más eficiente si $m = r^k$]{.orange} para algún entero positivo $k$.\n\n  - Para la mayoría de los computadores, esto implica establecer $m = 2^k$, donde $k$ se selecciona para que $m$ sea \"*grande*\" y los números involucrados estén dentro de la precisión de la máquina.\n\n:::\n:::\n\n---\n\n::: {.definition}\n[Definición:]{.blue}</br>\n\nEl generador de la @eq-congruencial no puede producir más de $m$ números diferentes antes de que el ciclo se repita. Sea $p$ el período de una secuencia, cuando $p$ es igual a su máximo, es decir, $p=m$. Decimos que el generador de números aleatorios [tiene un período completo]{.green}.\n:::\n\n--- \n\n::: {.alert}\n[Teorema: Hull-Dobell (Generador de período completo)]{.green}</br>\nSea el Generador Congruencial Lineal (GCL) de la forma:\n$$ x_i = (a x_{i-1} + b) \\pmod m$$\n\nPara $b > 0$, el GCL tiene un período completo si y solo si se cumplen las siguientes tres condiciones:\n\n::: {.small}\ni. El único entero positivo que divide exactamente tanto a $m$ como a $b$ es 1.\n\nii. Si $q$ es un número primo (divisible solo por sí mismo y 1) que divide a $m$, entonces $q$ divide a $(a-1)$. Es decir, $a \\equiv 1 \\pmod{q}$, para todo factor primo $q$ de $m$.\n\niii. Si 4 divide a $m$, entonces 4 divide a $(a-1)$. Es decir, $a \\equiv 1 \\pmod{4}$, si $m$ es múltiplo de 4.\n\n- Si $m = 2^k$, la relación (iii) implicaría que $a = 4b + 1$ para $b$ entero positivo, lo cual también satisface la relación (ii).\n\n- Cuando $m = 2^n$, la relación (i) se logra fácilmente estableciendo $b$ como cualquier constante positiva impar.\n:::\n:::\n\n## Propiedades de los generadores congruenciales\n\n::: {.definition}\nSe podría esperar que los números resultantes del generador congruencial mixto (@eq-congruencial) tengan dependencias inusuales, y esto puede ser ilustrado en lo siguiente:\n\n- Sea $x_{i+1} = 5x_i \\pmod{m}$\n\n- Aquí, $x_{i+1} = 5x_i - h_{i}m$, donde $h$ toma uno de los valores 0, 1, 2, 3, 4.\n\nPor lo tanto, los pares de valores sucesivos $(x_i, x_{i+1})$ representan las coordenadas cartesianas de puntos que se encuentran en una de las cinco rectas dadas por la ecuación, y cuanto mayor es $m$, más larga será la secuencia de números generados que permanecerá en una de estas líneas antes de pasar a otra.\n\n:::\n\n---\n\n::: {.example}\n[Ejemplo:]{.green}</br>\n\nSi $x_1 = 1$ y $m = 11$, entonces:\n$$x_1 = 5, x_2 = 3, x_3 = 4, x_4 = 9, x_5 = 1$$\n\ny la línea utilizada cambia con cada iteración.\n\nSin embargo, si $x_1 = 1$ y $m = 1000$, entonces:\n$$x_1 = 5, x_2 = 25, x_3 = 125, x_4 = 625, x_5 = 125$$\n\ny la secuencia de $x_1$ a $x_4$ se obtiene de la línea $x_{i+1} = 5x_i$, tras lo cual la secuencia degenera en una alternancia simple. Pares de valores sucesivos dan puntos que yacen en un número limitado de líneas rectas, tríos de valores sucesivos se encuentran en un número limitado de planos, etc.\n:::\n\n---\n\n::: {.example}\n[Ejemplo:]{.green}</br>\n\nSi tomamos el generador congruencial dado por:\n$$ x_{n-1} = 781 x_n + 387 \\pmod{1000}$$\ncon $u_i = x_i/1000$, para $0 \\leq i \\leq 999$.\n\n\n```{r}\n#| echo: false\n#| fig-align: center\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nx0 = 0\nsecuencia = c(x0)\nn = 500\nfor (i in 1:n){\n  aux = (387 + 781*secuencia[i])%%1000\n  secuencia = c(secuencia, aux)\n}\n\nsecuencia = secuencia/1000\n\nu = data.frame(x=secuencia[1:n-1], \n               y=secuencia[2:n])\n\n#this also works!\n# embed(secuencia, 2)\n\nu %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal()\n```\n\n:::\n\n---\n\n::: {.alert}\n\n- La [marcada tendencia de *vacíos*]{.green} en el plano se debe al pequeño valor de $m$ utilizado, lo que también permite observar el tipo de patrón que puede aparecer. Por lo tanto, en muchos casos, [se sugiere modificar la salida de los generadores]{.orange} congruenciales antes de ser utilizada, lo cual siempre implica una revisión. \n\n- Una manera de modificar la salida es [tomar los números en grupos de tamaño $g$, para luego *mezclarlos*]{.orange} mediante una permutación, antes de ser utilizados.\n    - @Andrews1972 utiliza $g=500$.\n\n    - @Egger1979 y @Atkinson1980 proponen $g=100$.\n\n- Un enfoque alternativo, propuesto por @MacLaren1965, es tener un conjunto de $g$ números almacenados, a partir de generador congruencial, y elegir cuál de estos números usar a continuación mediante un dígito indicador aleatorio del rango 1 a $g$, obtenido, por ejemplo, por un generador congruencial separado. El lugar que dejó el número utilizado del conjunto es reemplazado entonces con el siguiente número del generador original, y así sucesivamente.\n:::\n\n---\n\n::: {.example}\n[Ejemplo:]{.green}</br>\n\n```{r}\n#| echo: false\n#| fig-height: 8\n#| fig-width: 16\n#| fig-align: center\n\nlibrary(tidyverse)\nlibrary(forcats)\nlibrary(gridExtra)\nlibrary(ggplot2)\n\nx0 = 0\nsecuencia = c(x0)\nn = 500\nfor (i in 1:n){\n  aux = (387 + 781*secuencia[i])%%1000\n  secuencia = c(secuencia, aux)\n}\n\nsecuencia = secuencia/1000\n\nu = data.frame(x=secuencia[1:n-1], \n               y=secuencia[2:n])\n\n#this also works!\n# embed(secuencia, 2)\n\np1 = u %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal() +\n  labs(title = \"Generador del ejemplo\",\n       subtitle = \"Vacíos en los números generados\")\n\n# the other RNG method Egger (1979) and Atkinson (1980)\ng = 100\nsecuencia2 = c()\nfor (i in 1:(n/g)){\n  aux = c()\n  aux = secuencia[((i-1)*g+1):(i*g)]\n  aux = sample(aux, replace=FALSE)\n  secuencia2 = c(secuencia2, aux)\n}\n\nu2 = data.frame(x=secuencia2[1:n-1], \n               y=secuencia2[2:n])\n\np2 = u2 %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal() +\n  labs(title = \"Generador mejorado 1\",\n       subtitle = \"Egger (1979) y Atkinson (1980)\")\n\n# MacLaren and Marsaglia (1965)\nx0 = 0\nsecuencia = c(x0)\nn = 520\nfor (i in 1:n){\n  aux = (387 + 781*secuencia[i])%%1000\n  secuencia = c(secuencia, aux)\n}\n\nsecuencia = secuencia/1000\n\ng = 20\npool = secuencia[2:(g+1)]\nx0 = 0.5\nseleccion = c(x0)\nn = 500\nfor (i in 1:n){\n  aux = ((pi + seleccion[i])^5)%%1\n  seleccion = c(seleccion, aux)\n}\nseleccion = as.integer(round((seleccion[2:(n+1)]*(g-1)+1), digits=0))\n\nn = 500\nsecuencia3 = rep(0, n)\nfor (i in 1:n){\n  secuencia3[i] = pool[seleccion[i]]\n  pool[seleccion[i]] = secuencia[(i+20)]\n}\n\nu3 = data.frame(x=secuencia3[1:n-1], \n                y=secuencia3[2:n])\n\np3 = u3 %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal() +\n  labs(title = \"Generador mejorado 2\",\n       subtitle = \"MacLaren y Marsaglia (1965)\")\n\n\n# Combine both plots using gridExtra\ngrid.arrange(p1, p2, p3, ncol=3)\n\n```\n\n:::\n\n## Método de los Cuadrados Medios\n\nOtra alternativa para generar números pseudo-aleatorios es utilizar el [Método de los Cuadrados Medios]{.green}. Este método tiene la desventaja de que en generan resulta en un período corto. Al aplicarlo repetidamente, el método [tiende a producir el mismo número de manera recurrente o entra en un ciclo]{.orange}, repitiendo una secuencia de números anterior, lo que resulta en un bucle infinito. Esto limita su efectividad para generar secuencias de números aleatorios confiables y variados.\n\n---\n\n::: {.definition .small}\n[Método de los cuadrados medios]{.blue}</br>\n\nSe inicia con un número entero positivo de cuatro dígitos $x_0$, posteriormente se debe seguir la siguiente secuencia:\n\n1. Elevar al cuadrado $x_0$ para obtener un entero de hasta ocho dígitos; si es necesario, añadir ceros a la izquierda para que tenga exactamente ocho dígitos.\n\n2. Tomar los cuatro dígitos del medio de este número de ocho dígitos como el siguiente número de cuatro dígitos $x_1$.\n\n3. Colocar un punto decimal a la izquierda de $x_1$ para obtener el primer [número aleatorio $u_1 \\sim U(0,1)$]{.green}.\n\n4. Repetir los pasos 1 a 3 $n$ veces para generar un vector de números aleatorios de largo $n$.\n:::\n\n# Analizando la calidad de los números pseudo aleatorios\n\n\n## Métodos de bondad de ajuste\n\n\n\n\n## Ejercicios\n\n1. Si $x0 = 5$ y $x_n = 3x_{n−1} \\pmod{150}$, generar $x_1, \\ldots, x_{100}$. Visualizar la secuencia generada en un histograma de frecuencias y comentar los resultados. \n\n2. Si $x_0 = 3$ y $x_n = (5x_{n−1} + 7) \\pmod{200}$, generar $x_1, \\ldots, x_{1000}$. Visualizar la secuencia generada en un histograma de frecuencias y comentar los resultados. \n\n\n# Referencias \n\n::: {#refs}\n:::","srcMarkdownNoYaml":"\n\n\n```{r}\n#| echo: false\nlibrary(reticulate)\n# use_python('C:/ProgramData/Anaconda3/python.exe')\n```\n\n# Simulación Estadística {background-color=\"#00A499\"}\n\n## ¿Qué es la simulación?\n\n::: {.definition}\nEl acto de [\"_simular_\"]{.green}:<br/>\n\n- Según el [Diccionario de la Lengua Española de la RAE](https://www.rae.es/drae2001/simular), [\"_simular_\"]{.green} significa representar algo, fingiendo o imitando lo que no es.\n\n- De acuerdo con [TheFreeDictionary](https://es.thefreedictionary.com/simular), [\"_simular_\"]{.green} es hacer creer una cosa que no es verdad con palabras, gestos o acciones, y también se refiere a representar algo fingiendo lo que no es.\n\n- [WordReference](https://www.wordreference.com/definicion/simular#:~:text=tr.,simul%C3%B3%20que%20no%20le%20importaba.) define [\"_simular_\"]{.green} como representar una cosa fingiendo o imitando lo que no es.\n:::\n\n---\n\n::: {.definition}\n[de  ChatGPT]{.green}<br/>\n_Estas definiciones resaltan la idea de crear una apariencia o representación de algo que no es real o verdadero, ya sea mediante acciones, palabras o gestos. En un contexto más amplio, la simulación puede usarse en diversos campos, como la ciencia, la tecnología y el arte, para representar o modelar situaciones, procesos o sistemas de manera virtual o teórica._ \n<br/>\n\n_El término \"simular\" proviene del latín \"_simulāre_\" y tiene varias definiciones que se centran en la idea de representación o imitación_\n:::\n\n---\n\nLa experimentación directa sobre la realidad puede tener muchos inconvenientes, entre otros:\n\n- [Coste elevado]{.green}: por ejemplo cuando las pruebas son destructivas o si es necesario esperar mucho tiempo para observar los resultados.\n\n- [Puede no ser ética]{.green}: por ejemplo la experimentación sobre seres humanos o la dispersión de un contaminante.\n\n- [Puede resultar imposible]{.green}: por ejemplo cuando se trata de un acontecimiento futuro o una alternativa en el pasado.\n\n## Simulación estadística \n\n::: {.small}\n\n- Para estadísticos e investigadores, el término ['simulación']{.green} describe una gran cantidad de técnicas variadas y útiles, todas relacionadas con la imitación de las reglas de un modelo de algún tipo. Estas técnicas permiten a los investigadores y analistas estudiar y predecir el comportamiento del sistema bajo diferentes condiciones y escenarios sin necesidad de experimentos físicos o reales.\n\n- En la simulación estadística, se emplean modelos probabilísticos para representar la incertidumbre y la variabilidad inherente a los fenómenos reales. Estos modelos pueden ser tan simples como distribuciones de probabilidad básicas o tan complejos como sistemas dinámicos y redes neuronales. Al ejecutar la simulación múltiples veces, se obtienen distribuciones de resultados que ayudan a comprender mejor el sistema y a evaluar riesgos, eficiencia, y otras métricas importantes.\n\n- El objetivo es a menudo explorar [\"qué pasaría si\"]{.green} en situaciones donde los experimentos reales son impracticables, costosos, peligrosos o éticamente inviables.\n\n:::\n\n---\n\n::: {.example}\n[Por ejemplo:]{.blue}<br/>\n\n- [En ingeniería]{.green}, los estudios de simulación pueden usarse para predecir cómo se comportará una estructura bajo ciertas cargas sin tener que construirla físicamente. \n\n- [En finanzas]{.green}, pueden ayudar a evaluar los riesgos de diferentes inversiones o estrategias de mercado. \n\n- [En medicina]{.green}, se pueden utilizar para prever la progresión de enfermedades o la respuesta a distintos tratamientos.\n:::\n<br/>\n\n. . .\n\nLos estudios de simulación [_dependen de la generación de datos y escenarios artificiales_]{.green}, pero [buscan producir resultados que sean lo suficientemente precisos]{.green} y realistas como para informar decisiones o entender mejor un sistema o fenómeno.\n\n---\n\n::: {.example}\n[Ejemplo práctico]{.blue}<br/>\nSupongamos que comenzamos a coleccionar láminas para un álbum con $n = 75$ láminas, que se venden sobres con $m = 6$ láminas y cada sobre tiene un costo de $\\$800$, y que estamos interesados en el número de sobres que hay que comprar para completar la colección, por ejemplo en su valor medio. \n:::\n<br/>\n\n. . .\n\nPodemos aproximar la distribución del número de sobres para completar la colección a partir de $nsim = 1000$ simulaciones de coleccionistas de láminas\n\n--- \n\n:::: {.columns}\n\n::: {.column width=\"50%\"}\n\n### Código\n\n```{r}\n#| eval: false\n#| include: true\n# Parámetros\nn <- 75 # Número total de láminas del álbum\nm <- 6  # Número de láminas en cada sobre\nrepe <- TRUE # Láminas repetidas en cada sobre\n# Número de simulaciones\nnsim <- 1000\n# Resultados simulación\nnsobres <- numeric(nsim)\n# evol <- vector(\"list\", nsim)\n# Fijar semilla\nset.seed(1)\n# Bucle simulación\nfor (isim in 1:nsim) {\n  # seed <- .Random.seed    # .Random.seed <- seed\n  album <- logical(n)\n  i <- 0 # Número de sobres\n  while(sum(album) < n) {\n    i <- i + 1\n    album[sample(n,m, replace = repe)] <- TRUE\n  }\n  nsobres[isim] <- i\n}\n\nhist(nsobres, breaks = \"FD\", freq = FALSE,\n     main = \"\", xlab = \"Número de sobres\")\nlines(density(nsobres))\n```\n:::\n\n::: {.column width=\"50%\"}\n\n### Histograma\n```{r}\n#| eval: true\n#| echo: false\n# Parámetros\nn <- 75 # Número total de láminas del álbum\nm <- 6  # Número de láminas en cada sobre\nrepe <- TRUE # Láminas repetidas en cada sobre\n# Número de simulaciones\nnsim <- 1000\n# Resultados simulación\nnsobres <- numeric(nsim)\n# evol <- vector(\"list\", nsim)\n# Fijar semilla\nset.seed(1)\n# Bucle simulación\nfor (isim in 1:nsim) {\n  # seed <- .Random.seed    # .Random.seed <- seed\n  album <- logical(n)\n  i <- 0 # Número de sobres\n  while(sum(album) < n) {\n    i <- i + 1\n    album[sample(n,m, replace = repe)] <- TRUE\n  }\n  nsobres[isim] <- i\n}\n\nhist(nsobres, breaks = \"FD\", freq = FALSE,\n     main = \"\", xlab = \"Número de sobres\")\nlines(density(nsobres))\n```\n:::\n::::\n\n--- \n\n:::: {.columns}\n::: {.column width=\"50%\"}\n\n:::{.small}\nAproximación por simulación del número medio de sobres para completar la colección:\n:::\n\n```{r}\n#| eval: true\n#| echo: true\nmean(nsobres)\n```\n\n<br/>\n\n::: {.small}\nNúmero mínimo de sobres para asegurar de que se completa la colección con una probabilidad del 95%:\n:::\n\n```{r}\n#| eval: true\n#| echo: true\nquantile(nsobres, probs = 0.95)\n```\n\n<br/>\n\n::: {.small}\nReserva de dinero para poder completar la colección el 95% de las veces:\n:::\n\n```{r}\n#| eval: true\n#| echo: true\nquantile(nsobres, probs = 0.95)*800\n```\n:::\n\n::: {.column width=\"50%\"}\n\nAproximaciones por simulación de la distribución del número de sobres para completar la colección, de su valor esperado (línea vertical continua) y del cuantil 0.95 (línea vertical discontinua).\n\n```{r}\n#| eval: true\n#| echo: true\nsol = mean(nsobres)\nnmin = quantile(nsobres, probs = 0.95)\nhist(nsobres, breaks = \"FD\", freq = FALSE,\n     main = \"\", xlab = \"Número de sobres\")\nlines(density(nsobres))\nabline(v = sol)\nabline(v = nmin, lty = 2)\n\n```\n\n:::\n\n::::\n\n## Aplicaciones de simulación\n\nLa simulación resulta de utilidad en multitud de contextos diferentes. Los principales campos de aplicación en estadística pueden ser:\n\n- Muestreo, remuestreo…\n\n- Aproximación de distribuciones (de estadísticos, estimadores…)\n\n- Realización de contrastes, intervalos de confianza…\n\n- Comparación de estimadores, contrastes…\n\n- Validación teoría (distribución asintótica…)\n\n- Inferencia Bayesiana\n\n\n## Tipos de números aleatorios\n\nEl primer requisito para poder realizar simulación estocástica sería disponer de números aleatorios. Se distingue entre tres tipos de secuencias:\n\n- [números aleatorios puros (true random):]{.orange} se caracteriza porque no existe ninguna regla o plan que nos permita conocer sus valores.\n\n- [números pseudo-aleatorios:]{.orange} simulan realizaciones de una variable aleatoria (uniforme),\n\n- [números cuasi-aleatorios:]{.orange} secuencias deterministas con una distribución más regular en el rango considerado.\n\n---\n\n### Números aleatorios puros\n\nNormalmente son obtenidos por procesos físicos (loterías, ruletas, ruidos…) y, hasta hace una décadas, se almacenaban en tablas de dígitos aleatorios. Por ejemplo, en 1955 la Corporación RAND publicó el libro [*A Million Random Digits with 100,000 Normal Deviates*]{.orange} que contenía números aleatorios generados mediante una ruleta electrónica conectada a una computadora\n\n![Portada del libro *A Million Random Digits with 100,000 Normal Deviates* [@hammersley1955million]. ](images/rand_book.jpg){width=\"20%\" fig-align=\"center\"}\n\n---\n\nEl procedimiento que se utilizaba para seleccionar de una tabla, de forma manual, números aleatorios en un rango de 1 a $m$ era el siguiente:\n\n- Se selecciona al azar un punto de inicio en la tabla y la dirección que se seguirá.\n\n- Se agrupan los dígitos de forma que “cubran” el valor de $m$.\n\n- Se va avanzado en la dirección elegida, seleccionando los valores menores o iguales que $m$ y descartando el resto.\n\n---\n\n### Números cuasi-aleatorios\n\nAlgunos problemas, como la integración numérica (que veremos más adelante en este curso), no dependen realmente de la aleatoriedad de la secuencia. Para evitar generaciones poco probables, se puede recurrir a secuencias [*cuasi-aleatorias*]{.orange}, también denominadas sucesiones de baja discrepancia (hablaríamos entonces de métodos cuasi-Monte Carlo, por ejemplo). La idea sería que la proporción de valores en una región cualquiera sea siempre aproximadamente proporcional a la medida de la región (como sucedería en media con la distribución uniforme, aunque no necesariamente para una realización concreta).\n\n\n----\n\nPor ejemplo, el paquete randtoolbox de R implementa métodos para la generación de secuencias cuasi-aleatorias \n\n```{r}\n#| eval: true\n#| echo: true\n#| fig-cap: \"Secuencias cuasi-aleatorias bidimensionales obtenidas con los métodos de Halton (izquierda), Sobol (centro) y Torus (derecha).\"\nlibrary(randtoolbox)\nn <- 2000\npar.old <- par(mfrow = c(1, 3))\nplot(halton(n, dim = 2), xlab = 'x1', ylab = 'x2')\nplot(sobol(n, dim = 2), xlab = 'x1', ylab = 'x2')\nplot(torus(n, dim = 2), xlab = 'x1', ylab = 'x2')\n```\n\n---\n\n### Números pseudo-aleatorios\n\nLa mayoría de los métodos de simulación se basan en la posibilidad de [generar números pseudo-aleatorios]{.orange} que imiten las propiedades de valores independientes de la distribución $U \\sim (0,1)$, es decir, que imiten las propiedades de una muestra aleatoria simple^[Se debe distinguir entre secuencia y muestra. En un problema de [inferencia]{.green}, en principio estamos interesados en una característica desconocida de la población. En cambio, en un problema de [simulación]{.green}, [la población]{.orange} es el modelo y lo conocemos por completo (no obstante el problema de simulación puede surgir como solución de un problema de inferencia)] de esta distribución.\n\nEl procedimiento habitual para obtener estas secuencias es emplear un algoritmo recursivo denominado generador:\n\n$$x_i = f(x_{i-1}, x_{i-2}, \\ldots, x_{i-k})$$\n\ndonde: $k$ es el orden del generador  y $(x_{0}, x_{1}, \\ldots, x_{k-1})$ es la semilla (estado inicial).\n\nEl periodo o longitud del ciclo es la longitud de la secuencia antes de que vuelva a repetirse. Lo denotaremos por $p$.\n\n---\n\n::: {.definition}\nLos números de la sucesión son predecibles, conociendo el [algoritmo]{.green} y la [semilla]{.green}. Sin embargo, si no se conociesen, no se debería poder distinguir una serie de números pseudoaleatorios de una sucesión de números verdaderamente aleatoria (utilizando recursos computacionales razonables). \n:::\n\n<br/>\nEn caso contrario esta predecibilidad puede dar lugar a algunos problemas. Acá se muestran algunos artículos que ejemplifican esta situación:\n\n  - [Cryptanalysis of the Random Number Generator of the Windows Operating System](http://eprint.iacr.org/2007/419).\n  \n  - [Attacks on Pseudo Random Number Generators Hiding a Linear Structure](https://eprint.iacr.org/2021/1204).\n  \n  - [Potential Weaknesses In Pseudorandom Number Generators](https://www.cs.tufts.edu/comp/116/archive/fall2013/ali.pdf).\n  \n  - [Security problems for a pseudorandom sequence generator based on the Chen chaotic system](https://www.sciencedirect.com/science/article/abs/pii/S0010465513001604).\n\n---\n\n- Como regla general, por lo menos mientras se está desarrollando un código o análisis particular, interesa fijar la semilla de aleatorización.\n\n- Permite la reproducibilidad de los resultados.\n\n- Facilita la depuración del código.\n\n---\n\n:::{.alert}\n[Tarea:]{.orange}</br>\nRevisar artículo *[A search for good pseudo-random number generators: Survey and empirical studies](https://www.sciencedirect.com/science/article/pii/S1574013722000144?casa_token=qAGiENpFHZwAAAAA:_BzpZp7UVbTaP517SK9ObEBs45Yg1niOBJlPg6EjIWkTU9nyZ0CuFf8qUp6_R0vZxJ6AQP4jFg)* [@bhattacharjee2022search].\n:::\n\n---\n\n### La Semilla\n\nLos computadores son máquinas determinísticas, capaces de seguir solamente reglas predeterminadas. La solución es emplear [números pseudo aleatorios]{.green}, que como esquema general, funcionan de la siguiente manera:\n\n- Se inicia una secuencia arbitraria de [bytes]{.orange}. Los [bits]{.orange} de esa secuencia son interpretados como los digitos de un número aleatorio $Uniforme(0,1)$, expresado de forma binaria hasta una cantidad fija de lugares decimales.\n\n- Luego se aplica una compleja función matemática (de forma determinística) que transforma el arreglo (o matriz) de bytes en un nuevo arreglo de bytes. El nuevo arreglo de bytes es técnicamente una función determinista del anterior, pero en la práctica no se parece mucho al arreglo original.\n\n- Voltear un solo bit en la matriz de bytes original podría cambiar los bits en cualquier parte de la salida. La nueva matriz se trata como una nueva variable $Uniforme(0,1)$, y así sucesivamente.\n\n\n--- \n\nUna [ventaja del uso de números pseudo aleatorios]{.orange} es que puede configurar manualmente la matriz de bytes inicial al comienzo de un programa. Esto se denomina la [semilla]{.green}. Lo anterior tiene algunos usos:\n\n- Si hay un error en algún programa aleatorio que sólo ocurre algunas veces, puede hacerse perfectamente reproducible y averiguar qué está pasando.\n\n- Si se necesita que los resultados de los análisis sean exactamente reproducibles, se puede establecer la semilla en la secuencia de comandos.\n\n- Cuando escribe pruebas, puede establecer la semilla y asegurarse de que el resultado sea exactamente el esperado.\n\n---\n\nEn Python\n```{python}\n#| echo: true\nimport random\nrandom.seed(10)\nprint(random.random())\n```\n\n\nEn R\n```{r}\n#| echo: true\nset.seed(10)\nprint(runif(1))\n```\n\n\n---\n\n### Generando números aleatorios en *R*\n\nLa generación de números pseudo-aleatorios en R es una de las mejores disponibles en paquetes estadísticos. Entre las herramientas implementadas en el paquete base de R podemos destacar:\n\n- ```set.seed(entero)```: permite establecer la semilla (y el generador).\n\n- ```RNGkind()```: selecciona el generador.\n\n- ```r_distribución(n,...)```: genera valores aleatorios de la correspondiente distribución. Por ejemplo, ```runif(n, min = 0, max = 1)```, generaría $n$ valores de una uniforme. Se puede acceder al listado completo de las funciones disponibles en el paquete ```stats``` mediante el comando ```?distributions```.\n\n- ```sample()```: genera muestras aleatorias de variables discretas y permutaciones.\n\n- ```simulate()```: genera realizaciones de la respuesta de un modelo ajustado.\n\n---\n\n::: {.definition}\n[La Semilla]{.green} </br>\n\n- La semilla se almacena en ```.Random.seed```:\n\n- Inicialmente no existe. La recomendación es establecerla con ```set.seed()```, en caso contrario se generará a partir del reloj del sistema cuando se necesite.\n\n- Se almacena como un objeto oculto en el entorno de trabajo (o entorno global ```.GlobalEnv```). Con las opciones por defecto de R, si al terminar una sesión almacenamos el entorno (en un fichero ```.RData```), al iniciar una nueva sesión se restaurará también la semilla (y se podría continuar con las simulaciones).\n\n- Es un vector de enteros cuya estructura depende del tipo de generador, por lo que no debería ser modificado manualmente.\n\n- Puede ser recomendable almacenar (el objeto completo) antes de generar simulaciones, e.g. ```seed <- .Random.seed```. Esto permite reproducir los resultados y facilita la depuración de posibles errores.\n\n:::\n\n## Práctica: Variables aleatorias Bernoulli\n\n::: {.example}\n[Monedas al aire: Variables aleatorias Bernoulli]{.green}</br>\n\nUno de los [modelos probabilísticos más intuitivos]{.orange} es simplemente lanzar una moneda (equilibrada o no).\n\n- Digamos que la probabilidad de obtener [cara]{.green} es $p$, por lo tanto, la probabilidad de obtener [sello]{.green} es $1-p$.\n\n- En términos probabilisticos podríamos decir que el lanzamiento de esta moneda corresponde a una [Variable aleatoria Bernoulli]{.orange}. También denotado por $Bernoulli(p)$.\n\n:::\n\n---\n\n<!-- https://livebook.manning.com/book/data-science-bookcamp/chapter-3/21 -->\nProbemos generando el experimento de manera computacional:\n\n::: {.panel-tabset} \n\n## Python\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{python}\n#| eval: false\n#| echo: true\n\n# importando librerías\nimport matplotlib.pyplot as plt\nfrom scipy.stats import bernoulli\n\n#Datos\np= 0.7 #Probabilidad de ocurrencia \nn = 1000 #Tamaño de la muestra\nmuestras = bernoulli.rvs(p,size=n) \nplt.figure(figsize=(5,4))\nplt.hist(muestras);\nplt.xlabel('Lanzamiento de la moneda')\nplt.ylabel('Conteo');\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{python} \n#| echo: false\n#| fig-align: center\n\n# importando librerías\nimport matplotlib.pyplot as plt\nfrom scipy.stats import bernoulli\n\n#Datos\np= 0.7 #Probabilidad de ocurrencia \nn = 1000 #Tamaño de la muestra\nmuestras = bernoulli.rvs(p,size=n)\nplt.figure(figsize=(5,4))\nplt.hist(muestras);\nplt.xlabel('Lanzamiento de la moneda')\nplt.ylabel('Conteo');\nplt.show()\n```\n\n:::\n\n:::\n\n## R\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n\n```{r}\n#| eval: false\n#| echo: true\n\nn = 1000\np = 0.7\nmoneda = rbinom(n, size = 1, prob = p)\nmoneda = ifelse(moneda == 0, \"Cara\", \"Sello\")\nbarplot(table(moneda)/n, \n        col = \"lightblue\", ylim = c(0,1), \n        ylab = \"Probabilidad\")\nabline(h=0.7, col= \"green\", lwd = 4)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r} \n#| echo: false\n#| fig-align: center\n\nn = 1000\np = 0.7\nmoneda = rbinom(n, size = 1, prob = p)\nmoneda = ifelse(moneda == 0, \"Cara\", \"Sello\")\nbarplot(table(moneda)/n, \n        col = \"lightblue\", ylim = c(0,1), \n        ylab = \"Probabilidad\")\nabline(h=0.7, col= \"green\", lwd = 4)\n```\n\n:::\n\n:::\n\n:::\n\n- La asignación de $p=0.7$ a la probabilidad de obtener *'cara'* y a $1-p=0.3$ la probabilidad de obtener *'sello'*, es denominado la función de masa de probabilidad, para esta variable aleatoria en particular.\n\n- Es conveniente describir la variable aleatoria en términos de números en vez de lados de una moneda. Por convención denominamos $cara=1$ y $sello=0$. \n\n---\n\n::: {.example}\n[Ejemplo]{.blue}</br>\n\nDos amigos efectúan una apuesta a partir de lanzamiento de una moneda. Un amigo le dice al otro:\n\n  > Te daré 5 por cada cara que salga y tu me pagarás 2 por cada sello que aparezca.\n\n:::\n\n- El pago promedio entonces será:\n  $$ \\mathbb{E}(pago) = 0.7 \\times 5 + 0.3 \\times (-2) = 2.9 $$\n  \n- Entonces, si lanzamos la moneda $N$ veces, donde $N$ es un número muy grande, el pago final será de aproximadamente $(2.9 \\times N)$.\n\n---\n\nPodemos observar cómo una variable aleatoria [Bernoulli]{.green}, podría generalizarse a algo como el lanzamiento de un dado, donde la función de masa de probabilidad asignaría una probabilidad a los números $0-5$. En este caso, denotamos como $p_i$ la probabilidad del $i$-ésimo resultado. Además:\n\n  - Todos los $p_i$ son no negativos, y\n  \n  - $\\sum_{i=0}^n p_i = 1$, con $n=5$. \n\nUna variable de tipo [Bernoulli]{.green} es denominada una [variable aleatoria discreta]{.green}. Esto significa que:\n\n  - Tiene un número finito de resultados posibles o\n  \n  - Todos sus posibles resultados pueden ser listados.\n  \n## Variables aleatorias Uniformes\n\n::: {.alert}\n[Lanzando dardos: Variables aleatorias Uniformes]{.green}</br>\n\nLo opuesto a las variables aleatorias discretas, son las [variables aleatorias contínuas]{.green}, que pueden tomar cualquier valor entre un rango de números.\n\n- La variable aleatoria contínua más simple para simular es la denominada [Uniforme]{.green}, denotada por $Uniforme(a,b)$.\n\n- Una v.a. $Uniforme(a,b)$, siempre se encontrará entre los números $a$ y $b$ con una probabilidad igual de estar en cualquier lugar dentro de ese rango.\n\n:::\n\n---\n\nProbemos generando una v.a. $Uniforme(1,5)$, de manera computacional:\n\n::: {.panel-tabset}\n\n## Python\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{python} \n#| eval: false\n#| include: true\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na, b = 1,5 #Rango \nn = 1000 #Tamaño de la muestra\nmuestras = np.random.uniform(low = a, high = b, size=n) \nplt.figure(figsize=(5,4))\ncount, bins, ignored = plt.hist(muestras, bins = 15, density=True)\nplt.plot(bins, np.ones_like(bins)/(b-a), linewidth=2, color='r')\nplt.xlim([0, 6]); plt.ylim([0, 1])\nplt.xlabel('x')\nplt.ylabel('Probabilidad');\nplt.show()\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{python}\n#| echo: false\n#| fig-align: center\n\nimport numpy as np\nimport matplotlib.pyplot as plt\n\na, b = 1,5 #Rango \nn = 1000 #Tamaño de la muestra\nmuestras = np.random.uniform(low = a, high = b, size=n) \nplt.figure(figsize=(5,4))\ncount, bins, ignored = plt.hist(muestras, bins = 15, density=True)\nplt.plot(bins, np.ones_like(bins)/(b-a), linewidth=2, color='r')\nplt.xlim([0, 6]); plt.ylim([0, 1]);\nplt.xlabel('$x$')\nplt.ylabel('Probabilidad');\nplt.show()\n```\n\n:::\n\n:::\n\n## R\n\n::: {.columns}\n\n::: {.column width=\"50%\"}\n\n```{r} \n#| eval: false\n#| include: true\nn = 1000\na = 1\nb = 5\nmuestras = runif(n, a, b)\nhist(muestras, freq = FALSE,\n     col = \"lightblue\", \n     ylim = c(0,1), xlim = c((a-1),(b+1)),\n     ylab = \"Probabilidad\", main=NULL)\nabline(h=(1/(b-a)), col= \"green\", lwd = 4)\n```\n\n:::\n\n::: {.column width=\"50%\"}\n\n```{r}\n#| echo: false\n#| fig-align: center\n\nn = 1000\na = 1\nb = 5\nmuestras = runif(n, a, b)\nhist(muestras, freq = FALSE,\n     col = \"lightblue\", \n     ylim = c(0,1), xlim = c((a-1),(b+1)),\n     ylab = \"Probabilidad\", main=NULL)\nabline(h=(1/(b-a)), col= \"green\", lwd = 4)\n```\n\n:::\n\n:::\n\n:::\n\nPara v.a. discretas, la función de masa de probabilidad asigna una probabilidad finita a cada resultado posible. Para v.a. continuas, cada resultado exacto, tiene probabilidad 0, pero ciertos rangos tienen mayor probabilidad que otros. Denominamos a esta función la [función de densidad de probabilidad]{.orange} (pdf, por su sigla en inglés: *probability density function*). En el caso de la v.a. Uniforme, su pdf es:\n\n  $$p(x) = \\frac{1}{(b-a)}$$\n\n\n\n---\n\n::: {.alert}\n[Un recordatorio...]{.green}</br>\n\n- Similar a las funciones de masa de probabilidad, las restricciones de la pdf $f$ son:\n\n  - $f(x)$ no es nunca negativa, y\n  \n  - El área total bajo la curva de $f(x)$ es igual a 1. \n  \n- Cualquier $f$ que cumple estos requisitos, es una pdf válida. \n\n- Relacionado con la pdf, está la [Función de distribución acumulada]{.orange} (cdf, por su sigla en inglés: *cummulative distribution function*). Por convención, se utiliza la munúscula $f()$ para denotar a la pdf, y la mayúscula $F()$ para denotar a la cdf.\n\n- $F(x)$ es la probabilidad de que el valor de una variable aleatoria sea $\\leq x$. Así, $F(x)$ es una función no decreciente que se aproxima a cero cuando $x \\to -\\infty$ y se aproxima a uno cuando $x \\to \\infty$. \n\n:::\n\n---\n\n### Distribución [Uniforme]{.green} y los números pseudo-aleatorios\n\nLa distribución [Uniforme]{.green} es una de las más sencillas de entender y constituye la base para construir distribuciones más complejas, en términos teóricos y matemáticos. \n\n::: {.example}\n[Por ejemplo:]{.orange}\n\n- Si se quiere simular una v.a. $Bernoulli(p)$, se puede simular una variable aleatoria $u$ desde una distribución $Uniforme(0,1)$. Si $u<p$, se establece $B=cara$. Si no, $B=sello$. \n\n- Si se quiere simular el lanzamiento de un dado, se puede dividir el rango $[0.0, 1.0]$ en seis regiones, donde la $i$-ésima región corresponde a la $i$-ésima cara del dado. Luego, se extrae un valor $u$ desde la distribución $Uniforme(0,1)$. La cara del dado corresponderá a la región $[0.0, 1.0]$ en que $u$ caiga.\n\n- Si queremos simular una v.a. $Exponencial$ (que veremos más adelante), se extrae $u$ desde una distribución $Uniforme(0,1)$, Luego se calcula $-Log(u)$.\n\n:::\n\n---\n\nDigamos que conocemos la cdf $F_X()$ de una v.a., y que además, podemos computar la inversa de la cdf $F_X^{-1}(u)$, entonces:\n\n- Entonces $F_X^{-1}(u)$ será una muestra de $X$ si $u$ es extraída desde una distribución $Uniforme$. \n\n- Las librerías computacionales que simulan v.a. usualmente muestrean desde la distribución $Uniforme$ como su operación fundamental.\n\n---\n\n### Ejercicios\n\nProbar simulando distribuciones a partir de números pseudo-aleatorios, graficar los resultados y comprobar con el generador de distribuciones:\n\n- Simular 1000 números aleatorios a partir de una distribución exponencial, con $\\lambda = 0.5$ (fijarse en la parametrización del código).\n\n- Simular 1000 números aleatorios a partir de una distribución normal, con $\\mu = 10$, y $\\sigma^2 = 3$.\n\n- Simular 1000 números aleatorios a partir de una distribución chi-cuadrado, considere que el cuadrado de una distribución normal estándar se distribuye chi cuadrado con 1 grado de libertad.\n\n---\n\n### Transformación de variables y relación entre distribuciones\n\n![Ejemplo de algunas relaciones entre distribuciones univariadas](images/distribution_relationship_map.png)\n\n---\n\n**Enlaces con información más detallada:**\n\n- [Diagrama de relaciones entre distribuciones](https://www.johndcook.com/blog/distribution_chart/)\n\n- [Un diagrama un poco más detallado](http://www.math.wm.edu/~leemis/chart/UDR/UDR.html)\n\n\n# Generación de números pseudo-aleatorios {background-color=\"#00A499\"}\n\n## Contexto\n\n- En los [primeros días]{.green} de la simulación, la aleatoriedad se generaba mediante [técnicas manuales]{.orange}: \n\n  - lanzamiento de monedas\n  \n  - lanzamiento de dados\n  \n  - barajada de cartas\n  \n  - giro de la ruleta\n\n- Más tarde, se conectaron dispositivos físicos, como diodos de ruido y contadores Geiger, a las computadoras con el mismo propósito. \n\n- La creencia predominante sostenía que solo los dispositivos mecánicos o electrónicos podían producir secuencias verdaderamente aleatorias. \n\n---\n\n- Aunque los dispositivos mecánicos todavía son de utilidad en el juego y las loterías, estos métodos ya no son empleados en aplicaciones computacionales y de análisis por varios motivos: \n\n  - Los métodos mecánicos eran demasiado lentos para uso general, \n  \n  - las secuencias generadas no pueden ser reproducidas y, \n  \n  - se ha encontrado que los números generados exhiben tanto sesgo como dependencia. \n\n. . . \n\n::: {.alert}\nAunque ciertos métodos físicos de generación modernos son rápidos y pasarían la mayoría de las pruebas estadísticas de aleatoriedad (por ejemplo, aquellos basados en la radiación de fondo universal o en el ruido de un chip de PC), su principal desventaja sigue siendo su falta de reproducibilidad \n:::\n\n---\n\n- La mayoría de los generadores de números aleatorios de hoy en día no se basan en dispositivos físicos, sino en algoritmos simples que se pueden implementar fácilmente en una computadora. \n\n- Son métodos rápidos, requieren poco espacio de almacenamiento y pueden reproducir fácilmente una secuencia dada de números aleatorios. \n  \n\n::: {.alert}\n  Es importante destacar que un buen generador de números aleatorios captura todas las propiedades estadísticas importantes de las secuencias aleatorias verdaderas, aunque la secuencia se genere mediante un algoritmo determinista. Por esta razón, a estos generadores a veces se les llama pseudorandom.\n:::\n\n---\n\nEl componente fundamental de un estudio de simulación es la capacidad de [generar números aleatorios]{.green}, donde un número aleatorio representa el [valor de una variable aleatoria distribuida uniformemente en (0,1)]{.green}.\n\nMientras que originalmente los números aleatorios se generaban manual o mecánicamente, utilizando técnicas como girar ruedas, lanzar dados o barajar cartas, el enfoque moderno es utilizar computación para generar sucesivamente números pseudo aleatorios Estos números pseudo aleatorios constituyen una secuencia de valores que, aunque se generan de manera determinista, tienen todas las apariencias de ser variables aleatorias uniformes independientes (0,1).\n\n---\n\n## Métodos Congruenciales\n\nConsideremos la siguiente [secuencia de 100 números]{.green}, generada en R, parecen ser aleatorios, ¿cierto?:\n\n::: {.alert}\n\n```{r}\n#| echo: false\n\nx0 = 0\nsecuencia = c(x0)\nn = 100\nfor (i in 1:n){\n  aux = ((pi + secuencia[i])^5)%%1\n  secuencia = c(secuencia, aux)\n}\nsecuencia\n```\n\n:::\n\n---\n\nLos números pseudo aleatorios tienen la [*apariencia*]{.green} de ser aleatorios. Sin embargo son generados de una manera muy poco aleatoria. Tomemos por ejemplo la siguiente fórmula recursiva\n\n$$ x_{i+1} = \\mbox{parte fraccional de }(\\pi + x_i )^5 \\qquad \\mbox{para } i\\geq 0 $$\n\ndonde $x_0$ es un número dado que se encuentra en el rango $0 < x_0 < 1$\n\n---\n\n::: {.definition}\n[Tarea: ]{.blue}</br>\nReplicar la secuencia de números presentada anteriormente (en *R* y/o *Python*).\n:::\n\n---\n\nUno de los enfoques más comunes para generar números pseudo aleatorios comienza con un valor inicial $x_0$, llamado la [semilla]{.orange}, y luego calcula recursivamente los valores sucesivos $x_i$, para $i \\geq 1$, dejando que\n\n$$\nx_{i+1} = a x_{i} + b \\mod m\n$$ {#eq-congruencial}\n\ndonde $a$ (multiplicador), $b$ (incremento) y $m$ (módulo) son constantes enteras positivas dadas, y donde lo anterior significa que $ax_{i}+b$ se divide por $m$ y el resto se toma como el valor de $x_{i+1}$. Así, cada $x_i$ es $0, 1, \\ldots, m - 1$ y la cantidad $\\frac{x_i}{m}$, llamada [número pseudo aleatorio]{.orange}, se toma como una aproximación al valor de la variable aleatoria uniforme (0,1) $\\sim U(0,1)$.\n\n---\n\nMétodo Congruencial Aditivo\n$$ x_i = (x_{i-1} + b) \\mod m$$\n\nMétodo Congruencial Multiplicativo\n$$ x_i = a x_{i-1} \\pmod m$$\n\nMétodo Congruencial Mixto\n$$ x_i = (a x_{i-1} + b) \\pmod m$$\n\n---\n\n::: {.example}\n[Ejemplos:]{.green}</br>\n\nProbemos algunas combinaciones de parámetros y sus resultados:\n\n- $x_0 = 89, a=1573, b=19, m=10^3$.\n\n- $b=0, a=2^{16} + 3$ y $m=2^{31}$, generador *RANDU* de IBM. Este generador tiene varios problemas, que pueden ser descritos [acá](https://young.physics.ucsc.edu/115/randu.pdf). [Wolfram.com](https://demonstrations.wolfram.com/PoorStatisticalQualitiesForTheRANDURandomNumberGenerator/) entrega una visualización referente a este mismo problema.\n\n- $b=0, a=7^5$ y $m=2^{31}-1$, el primo de Mersenne, empleado por librerías IMSL (*International Mathematics and Statistics Library*) y NAG *(Numerical Algorithms Group Ltd.*), propuesto por @Park1988.\n\n- $b=0, a=48271$ y $m=2^31 -1$, actualización del anterior, propuesta por @Marsaglia1993.\n\n:::\n\n---\n\n::: {.alert}\n[Algunas consideraciones]{.blue}</br>\n\n::: {.small}\n- La [elección de las constantes $a, b$ y $m$]{.green} tiene un razonamiento que considera varios objetivos. Para empezar, se quiere que la [aritmética sea eficiente]{.orange}. Los seres humanos hacen aritmética en base 10, así que si la @eq-congruencial se operara manualmente, usando lápiz y papel, sería sensato que [$m$ fuera alguna potencia entera positiva de 10]{.orange}.\n\n- Si uno calcula naturalmente en [base numérica $r$]{.green}, entonces la operación de división por $m$ es [más eficiente si $m = r^k$]{.orange} para algún entero positivo $k$.\n\n  - Para la mayoría de los computadores, esto implica establecer $m = 2^k$, donde $k$ se selecciona para que $m$ sea \"*grande*\" y los números involucrados estén dentro de la precisión de la máquina.\n\n:::\n:::\n\n---\n\n::: {.definition}\n[Definición:]{.blue}</br>\n\nEl generador de la @eq-congruencial no puede producir más de $m$ números diferentes antes de que el ciclo se repita. Sea $p$ el período de una secuencia, cuando $p$ es igual a su máximo, es decir, $p=m$. Decimos que el generador de números aleatorios [tiene un período completo]{.green}.\n:::\n\n--- \n\n::: {.alert}\n[Teorema: Hull-Dobell (Generador de período completo)]{.green}</br>\nSea el Generador Congruencial Lineal (GCL) de la forma:\n$$ x_i = (a x_{i-1} + b) \\pmod m$$\n\nPara $b > 0$, el GCL tiene un período completo si y solo si se cumplen las siguientes tres condiciones:\n\n::: {.small}\ni. El único entero positivo que divide exactamente tanto a $m$ como a $b$ es 1.\n\nii. Si $q$ es un número primo (divisible solo por sí mismo y 1) que divide a $m$, entonces $q$ divide a $(a-1)$. Es decir, $a \\equiv 1 \\pmod{q}$, para todo factor primo $q$ de $m$.\n\niii. Si 4 divide a $m$, entonces 4 divide a $(a-1)$. Es decir, $a \\equiv 1 \\pmod{4}$, si $m$ es múltiplo de 4.\n\n- Si $m = 2^k$, la relación (iii) implicaría que $a = 4b + 1$ para $b$ entero positivo, lo cual también satisface la relación (ii).\n\n- Cuando $m = 2^n$, la relación (i) se logra fácilmente estableciendo $b$ como cualquier constante positiva impar.\n:::\n:::\n\n## Propiedades de los generadores congruenciales\n\n::: {.definition}\nSe podría esperar que los números resultantes del generador congruencial mixto (@eq-congruencial) tengan dependencias inusuales, y esto puede ser ilustrado en lo siguiente:\n\n- Sea $x_{i+1} = 5x_i \\pmod{m}$\n\n- Aquí, $x_{i+1} = 5x_i - h_{i}m$, donde $h$ toma uno de los valores 0, 1, 2, 3, 4.\n\nPor lo tanto, los pares de valores sucesivos $(x_i, x_{i+1})$ representan las coordenadas cartesianas de puntos que se encuentran en una de las cinco rectas dadas por la ecuación, y cuanto mayor es $m$, más larga será la secuencia de números generados que permanecerá en una de estas líneas antes de pasar a otra.\n\n:::\n\n---\n\n::: {.example}\n[Ejemplo:]{.green}</br>\n\nSi $x_1 = 1$ y $m = 11$, entonces:\n$$x_1 = 5, x_2 = 3, x_3 = 4, x_4 = 9, x_5 = 1$$\n\ny la línea utilizada cambia con cada iteración.\n\nSin embargo, si $x_1 = 1$ y $m = 1000$, entonces:\n$$x_1 = 5, x_2 = 25, x_3 = 125, x_4 = 625, x_5 = 125$$\n\ny la secuencia de $x_1$ a $x_4$ se obtiene de la línea $x_{i+1} = 5x_i$, tras lo cual la secuencia degenera en una alternancia simple. Pares de valores sucesivos dan puntos que yacen en un número limitado de líneas rectas, tríos de valores sucesivos se encuentran en un número limitado de planos, etc.\n:::\n\n---\n\n::: {.example}\n[Ejemplo:]{.green}</br>\n\nSi tomamos el generador congruencial dado por:\n$$ x_{n-1} = 781 x_n + 387 \\pmod{1000}$$\ncon $u_i = x_i/1000$, para $0 \\leq i \\leq 999$.\n\n\n```{r}\n#| echo: false\n#| fig-align: center\n\nlibrary(tidyverse)\nlibrary(ggplot2)\nx0 = 0\nsecuencia = c(x0)\nn = 500\nfor (i in 1:n){\n  aux = (387 + 781*secuencia[i])%%1000\n  secuencia = c(secuencia, aux)\n}\n\nsecuencia = secuencia/1000\n\nu = data.frame(x=secuencia[1:n-1], \n               y=secuencia[2:n])\n\n#this also works!\n# embed(secuencia, 2)\n\nu %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal()\n```\n\n:::\n\n---\n\n::: {.alert}\n\n- La [marcada tendencia de *vacíos*]{.green} en el plano se debe al pequeño valor de $m$ utilizado, lo que también permite observar el tipo de patrón que puede aparecer. Por lo tanto, en muchos casos, [se sugiere modificar la salida de los generadores]{.orange} congruenciales antes de ser utilizada, lo cual siempre implica una revisión. \n\n- Una manera de modificar la salida es [tomar los números en grupos de tamaño $g$, para luego *mezclarlos*]{.orange} mediante una permutación, antes de ser utilizados.\n    - @Andrews1972 utiliza $g=500$.\n\n    - @Egger1979 y @Atkinson1980 proponen $g=100$.\n\n- Un enfoque alternativo, propuesto por @MacLaren1965, es tener un conjunto de $g$ números almacenados, a partir de generador congruencial, y elegir cuál de estos números usar a continuación mediante un dígito indicador aleatorio del rango 1 a $g$, obtenido, por ejemplo, por un generador congruencial separado. El lugar que dejó el número utilizado del conjunto es reemplazado entonces con el siguiente número del generador original, y así sucesivamente.\n:::\n\n---\n\n::: {.example}\n[Ejemplo:]{.green}</br>\n\n```{r}\n#| echo: false\n#| fig-height: 8\n#| fig-width: 16\n#| fig-align: center\n\nlibrary(tidyverse)\nlibrary(forcats)\nlibrary(gridExtra)\nlibrary(ggplot2)\n\nx0 = 0\nsecuencia = c(x0)\nn = 500\nfor (i in 1:n){\n  aux = (387 + 781*secuencia[i])%%1000\n  secuencia = c(secuencia, aux)\n}\n\nsecuencia = secuencia/1000\n\nu = data.frame(x=secuencia[1:n-1], \n               y=secuencia[2:n])\n\n#this also works!\n# embed(secuencia, 2)\n\np1 = u %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal() +\n  labs(title = \"Generador del ejemplo\",\n       subtitle = \"Vacíos en los números generados\")\n\n# the other RNG method Egger (1979) and Atkinson (1980)\ng = 100\nsecuencia2 = c()\nfor (i in 1:(n/g)){\n  aux = c()\n  aux = secuencia[((i-1)*g+1):(i*g)]\n  aux = sample(aux, replace=FALSE)\n  secuencia2 = c(secuencia2, aux)\n}\n\nu2 = data.frame(x=secuencia2[1:n-1], \n               y=secuencia2[2:n])\n\np2 = u2 %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal() +\n  labs(title = \"Generador mejorado 1\",\n       subtitle = \"Egger (1979) y Atkinson (1980)\")\n\n# MacLaren and Marsaglia (1965)\nx0 = 0\nsecuencia = c(x0)\nn = 520\nfor (i in 1:n){\n  aux = (387 + 781*secuencia[i])%%1000\n  secuencia = c(secuencia, aux)\n}\n\nsecuencia = secuencia/1000\n\ng = 20\npool = secuencia[2:(g+1)]\nx0 = 0.5\nseleccion = c(x0)\nn = 500\nfor (i in 1:n){\n  aux = ((pi + seleccion[i])^5)%%1\n  seleccion = c(seleccion, aux)\n}\nseleccion = as.integer(round((seleccion[2:(n+1)]*(g-1)+1), digits=0))\n\nn = 500\nsecuencia3 = rep(0, n)\nfor (i in 1:n){\n  secuencia3[i] = pool[seleccion[i]]\n  pool[seleccion[i]] = secuencia[(i+20)]\n}\n\nu3 = data.frame(x=secuencia3[1:n-1], \n                y=secuencia3[2:n])\n\np3 = u3 %>% \n  ggplot(aes(x, y)) +\n  geom_point(colour=\"green4\") +\n  xlab(expression(x[i])) + ylab(expression(x[i+1])) +\n  theme_minimal() +\n  labs(title = \"Generador mejorado 2\",\n       subtitle = \"MacLaren y Marsaglia (1965)\")\n\n\n# Combine both plots using gridExtra\ngrid.arrange(p1, p2, p3, ncol=3)\n\n```\n\n:::\n\n## Método de los Cuadrados Medios\n\nOtra alternativa para generar números pseudo-aleatorios es utilizar el [Método de los Cuadrados Medios]{.green}. Este método tiene la desventaja de que en generan resulta en un período corto. Al aplicarlo repetidamente, el método [tiende a producir el mismo número de manera recurrente o entra en un ciclo]{.orange}, repitiendo una secuencia de números anterior, lo que resulta en un bucle infinito. Esto limita su efectividad para generar secuencias de números aleatorios confiables y variados.\n\n---\n\n::: {.definition .small}\n[Método de los cuadrados medios]{.blue}</br>\n\nSe inicia con un número entero positivo de cuatro dígitos $x_0$, posteriormente se debe seguir la siguiente secuencia:\n\n1. Elevar al cuadrado $x_0$ para obtener un entero de hasta ocho dígitos; si es necesario, añadir ceros a la izquierda para que tenga exactamente ocho dígitos.\n\n2. Tomar los cuatro dígitos del medio de este número de ocho dígitos como el siguiente número de cuatro dígitos $x_1$.\n\n3. Colocar un punto decimal a la izquierda de $x_1$ para obtener el primer [número aleatorio $u_1 \\sim U(0,1)$]{.green}.\n\n4. Repetir los pasos 1 a 3 $n$ veces para generar un vector de números aleatorios de largo $n$.\n:::\n\n# Analizando la calidad de los números pseudo aleatorios\n\n\n## Métodos de bondad de ajuste\n\n\n\n\n## Ejercicios\n\n1. Si $x0 = 5$ y $x_n = 3x_{n−1} \\pmod{150}$, generar $x_1, \\ldots, x_{100}$. Visualizar la secuencia generada en un histograma de frecuencias y comentar los resultados. \n\n2. Si $x_0 = 3$ y $x_n = (5x_{n−1} + 7) \\pmod{200}$, generar $x_1, \\ldots, x_{1000}$. Visualizar la secuencia generada en un histograma de frecuencias y comentar los resultados. \n\n\n# Referencias \n\n::: {#refs}\n:::"},"formats":{"revealjs":{"identifier":{"display-name":"RevealJS","target-format":"revealjs","base-format":"revealjs"},"execute":{"fig-width":10,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":false,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"knitr"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"center","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":true,"code-line-numbers":true,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[]},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","html-math-method":{"method":"mathjax","url":"https://cdnjs.cloudflare.com/ajax/libs/mathjax/2.7.0/MathJax.js?config=TeX-AMS_HTML-full"},"slide-level":2,"to":"revealjs","incremental":true,"highlight-style":"github","toc":false,"toc-depth":2,"number-sections":true,"self-contained":false,"output-file":"Simulacion_1_Generando_numeros_pseudo_aleatorios.html"},"language":{"toc-title-document":"Tabla de contenidos","toc-title-website":"En esta página","related-formats-title":"Otros formatos","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Fuente","other-links-title":"Otros Enlaces","code-links-title":"Enlaces de código","launch-dev-container-title":"Iniciar Dev Container","launch-binder-title":"Iniciar Binder","article-notebook-label":"Cuaderno de Artículo","notebook-preview-download":"Descargar Cuaderno","notebook-preview-download-src":"Descargar código fuente","notebook-preview-back":"Volver al Artículo","manuscript-meca-bundle":"Archivo MECA","section-title-abstract":"Resumen","section-title-appendices":"Apéndices","section-title-footnotes":"Notas","section-title-references":"Referencias","section-title-reuse":"Reutilización","section-title-copyright":"Derechos de autor","section-title-citation":"Cómo citar","appendix-attribution-cite-as":"Por favor, cita este trabajo como:","appendix-attribution-bibtex":"BibTeX","title-block-author-single":"Autor/a","title-block-author-plural":"Autores/as","title-block-affiliation-single":"Afiliación","title-block-affiliation-plural":"Afiliaciones","title-block-published":"Fecha de publicación","title-block-modified":"Fecha de modificación","title-block-keywords":"Palabras clave","callout-tip-title":"Tip","callout-note-title":"Nota","callout-warning-title":"Advertencia","callout-important-title":"Importante","callout-caution-title":"Precaución","code-summary":"Código","code-tools-menu-caption":"Código","code-tools-show-all-code":"Mostrar todo el código","code-tools-hide-all-code":"Ocultar todo el código","code-tools-view-source":"Ver el código fuente","code-tools-source-code":"Ejecutar el código","tools-share":"Compartir","tools-download":"Descargar","code-line":"Línea","code-lines":"Líneas","copy-button-tooltip":"Copiar al portapapeles","copy-button-tooltip-success":"Copiado","repo-action-links-edit":"Editar esta página","repo-action-links-source":"Ver el código","repo-action-links-issue":"Informar de un problema","back-to-top":"Volver arriba","search-no-results-text":"Sin resultados","search-matching-documents-text":"documentos encontrados","search-copy-link-title":"Copiar el enlace en la búsqueda","search-hide-matches-text":"Ocultar resultados adicionales","search-more-match-text":"resultado adicional en este documento","search-more-matches-text":"resultados adicionales en este documento","search-clear-button-title":"Borrar","search-text-placeholder":"","search-detached-cancel-button-title":"Cancelar","search-submit-button-title":"Enviar","search-label":"Buscar","toggle-section":"Alternar sección","toggle-sidebar":"Alternar barra lateral","toggle-dark-mode":"Alternar modo oscuro","toggle-reader-mode":"Alternar modo lector","toggle-navigation":"Navegación de palanca","crossref-fig-title":"Figura","crossref-tbl-title":"Tabla","crossref-lst-title":"Listado","crossref-thm-title":"Teorema","crossref-lem-title":"Lema","crossref-cor-title":"Corolario","crossref-prp-title":"Proposición","crossref-cnj-title":"Conjetura","crossref-def-title":"Definición","crossref-exm-title":"Ejemplo","crossref-exr-title":"Ejercicio","crossref-ch-prefix":"Capítulo","crossref-apx-prefix":"Apéndice","crossref-sec-prefix":"Sección","crossref-eq-prefix":"Ecuación","crossref-lof-title":"Listado de Figuras","crossref-lot-title":"Listado de Tablas","crossref-lol-title":"Listado de Listados","environment-proof-title":"Prueba","environment-remark-title":"Observación","environment-solution-title":"Solución","listing-page-order-by":"Ordenar por","listing-page-order-by-default":"Por defecto","listing-page-order-by-date-asc":"Menos reciente","listing-page-order-by-date-desc":"Más reciente","listing-page-order-by-number-desc":"De mayor a menor","listing-page-order-by-number-asc":"De menor a mayor","listing-page-field-date":"Fecha","listing-page-field-title":"Título","listing-page-field-description":"Descripción","listing-page-field-author":"Autor/a","listing-page-field-filename":"Nombre de archivo","listing-page-field-filemodified":"Fecha de modificación","listing-page-field-subtitle":"Subtítulo","listing-page-field-readingtime":"Tiempo de lectura","listing-page-field-wordcount":"Conteo de Palabras","listing-page-field-categories":"Categorías","listing-page-minutes-compact":"{0} minutos","listing-page-category-all":"Todas","listing-page-no-matches":"No hay resultados","listing-page-words":"{0} palabras"},"metadata":{"lang":"es","fig-responsive":false,"quarto-version":"1.4.551","auto-stretch":true,"title":"Simulación Estadística","subtitle":"Unidad 1: Generando números pseudo aleatorios","author":[{"name":"Francisco Plaza Vega","email":"francisco.plaza.v@usach.cl","affiliation":"Ingeniería en Estadística"}],"logo":"images/Usach_P2.png","editor":"source","center-title-slide":true,"slideNumber":"c/t","transition":"fade","toc-title":"Contenidos","toc-expand":false,"number-depth":2,"bibliography":["refs.bib"],"width":1600,"height":900,"center":false,"theme":["simple","styles.scss"],"multiplex":true}}},"projectFormats":["html"]}